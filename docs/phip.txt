'phip' is a branch of 'pip' which ignores all constraints giving a *maximum* version number for a dependency.
This is a  patch for the Python community's habit of needlessly specifying maximum versions, which makes it impossible to maintain a standard user environment which includes any Python code, forcing even ordinary, non-dev users to build an over-complicated and ultimately unworkable hierarchy of virtual environments.

To install, ZZZ.
To use, install, and then alias 'pip' to 'phip'.
In a perfect world, ignoring max version dependencies would be an *option* to pip.
But this would require rewriting all code that calls pip to add the -nomax option.

It would be nice if phip printed a warning when ignoring a max version, & I'd be grateful if anybody mods it to do that.

The fix is simple:

src/pip/_internal/operations/check.py defines the Specifier method check_package_set(PackageSet), which returns a lists of missing dependencies, and conflicting_deps, a list of conflicting dependencies.  We'll mess with conflicting_deps.
Specifier.check_package_set() calls boolean req.specifier.contains(version, prereleases=True) on every Specifier in every dependency.
contains(version)  returns true if $version allows self.version.
Class 'Specifier' is imported in src/pip/_internal/req/constructors.py:
from pip._vendor.packaging.specifiers import Specifier
So we'll go to _vendor.packaging.specifiers (https://github.com/philgoetz/phip/blob/main/src/pip/_vendor/packaging/specifiers.py) and change method 'contains' to convert all eg "package_x==2.3.1" to "package_x>=2.3.1", and to ignore all eg "package_X<2".
We'll alter 'contains' in 1 of 2 places:
  normalized_item = _coerce_version(item)                    # This pre-processes the string in 'item'.
  return operator_callable(normalized_item, self.version)    # This returns t if the dependency on normalized_item is satisfied.
